.. _global-namespace:

Global Namespace
================

.. index:: pair: namespace; global

.. toctree::
	:hidden:

	namespace_axl.rst
	class_axl_va_list.rst





.. _doxid-axl__g_2axl__g___pch_8h_1a812d16e5494522586b3784e55d479912:
.. _cid-bool_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a12a1e9b3ce141648783a82445d02b58d:
.. _cid-uint_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a124ea0f8f4a23a0a286b5582137f0b8d:
.. _cid-uchar_t:
.. _doxid-axl__g_2axl__g___pch_8h_1ad32f74eab70f4b87dac7fa0c0508ce29:
.. _cid-ushort_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a95c0f4cc152cbacf72a7d70d7077dc96:
.. _cid-ulong_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a0661d7d1353e0bca70c64563f635b034:
.. _cid-byte_t:
.. _doxid-axl__g_2axl__g___pch_8h_1ac0285e32cda95936805a40a03834a079:
.. _cid-word_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a7c6e07c0e75050634483ce87e1d4c6cb:
.. _cid-qword_t:
.. _doxid-axl__g_2axl__g___pch_8h_1abea8065ed82cda6a2a31592be9cd96b2:
.. _cid-dword_t:
.. _doxid-axl__g_2axl__g___pch_8h_1ad5b53eb56d72e7b521944d30f62d3bc4:
.. _cid-intdptr_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a52224f95b3853f82f6ee9f35ee146ba2:
.. _cid-uintdptr_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a50e1c0ee54e9888891a7c7889eb17e5f:
.. _cid-handle_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a7c11b6c8e64ae52835debfde24f748c0:
.. _cid-utf8_t:
.. _doxid-axl__g_2axl__g___pch_8h_1a106f39d3baa8aae83ab7ed73b5f296a9:
.. _cid-utf16_t:
.. _doxid-axl__g_2axl__g___pch_8h_1af41dd99b13a93c49aa9ce4461748356a:
.. _cid-utf32_t:
.. _doxid-axl__g_2axl__g___pch_8h_1af58f302020f86a1e3675b03d1c5a95d3:
.. _cid-axl_g_tracefile:
.. _doxid-axl__g_2axl__g___pch_8h_1a7631ad6a40903d25875a39aa6b76918b:
.. _cid-strlen_s:
.. _doxid-axl__g_2axl__g___pch_8h_1ae3f1c62bbcc1d67ca445c1bac935aece:
.. _cid-wcslen_s:
.. _doxid-axl__g_2axl__g___pch_8h_1a57e3a6e50890f680fc2609096ec5e3ba:
.. _cid-axl_trace_va:
.. _doxid-axl__g_2axl__g___pch_8h_1a0948889b43c0f9551b5d2da1fc9d3556:
.. _cid-axl_trace:
.. _doxid-axl__g_2axl__g___pch_8h_1af343b20373ba49a92fce523e948f2ab3:
.. _cid-assert:
.. _doxid-axl__g_2axl__g___pch_8h_1ab239f7be64e39baa1f0123113c8d3ae1:
.. _cid-axl_assert:
.. _doxid-axl__g_2axl__g___pch_8h_1a5a7f4d5a7495f905fba135ae61e0051b:
.. _cid-axl_debug_string:
.. _doxid-axl__g_2axl__g___pch_8h_1a2f6e9596675768732e675bc8dbe49260:
.. _cid-axl_debug_suffix:
.. _doxid-axl__g_2axl__g___pch_8h_1a9b51bfb7efb6e3dbc5e0db0493e42794:
.. _cid-axl_disable_copy:
.. _doxid-axl__gui_2axl__gui___widget_8h_1a55ab816c330816b6c3ce5152217738dd:
.. _cid-axl_gui_widget_begin_msg_map:
.. _doxid-axl__gui_2axl__gui___widget_8h_1a78a2561db5635c1d0933229d750a560b:
.. _cid-axl_gui_widget_end_msg_map:
.. _doxid-axl__gui_2axl__gui___widget_8h_1a9d485583295ed492f0c5e3cef7f73b6e:
.. _cid-axl_gui_widget_msg_handler:
.. _doxid-axl__g_2axl__g___pch_8h_1ada613be101fb1fdde25ad547fa957e1b:
.. _cid-axl_itoa:
.. _doxid-axl__g_2axl__g___pch_8h_1a463d1ed80a3d5bbc09a5381213267a2a:
.. _cid-axl_itoa_impl:
.. _doxid-axl__lex_2axl__lex___token_8h_1aa8eaa54484bdde84e794c449c2b2d0ec:
.. _cid-axl_lex_begin_token_name_map:
.. _doxid-axl__lex_2axl__lex___token_8h_1aae54277193930d8d6c56eef143b15760:
.. _cid-axl_lex_end_token_name_map:
.. _doxid-axl__lex_2axl__lex___token_8h_1a31091a1cd1266b97c1cd48f8185c5b18:
.. _cid-axl_lex_end_token_name_map_ex:
.. _doxid-axl__lex_2axl__lex___token_8h_1a625a1fa25769bed81620fa0506ca06a1:
.. _cid-axl_lex_token_name:
.. _doxid-axl__g_2axl__g___pch_8h_1affaf24a3b9c6a9f2dee291d8752fdf63:
.. _cid-axl_max:
.. _doxid-axl__mem_2axl__mem___allocator_8h_1a293df10d60e2e11a43d52dd1728978ef:
.. _cid-axl_mem_allocate:
.. _doxid-axl__mem_2axl__mem___allocator_8h_1aa5476c9321865dd9b822cf4acce092f4:
.. _cid-axl_mem_allocate_ex:
.. _doxid-axl__mem_2axl__mem___new_8h_1a7759ce2fd2b9dce4f43b613eb3774440:
.. _cid-axl_mem_delete:
.. _doxid-axl__mem_2axl__mem___allocator_8h_1a5bac3929ee7d88d2e2456ac3b9a94546:
.. _cid-axl_mem_free:
.. _doxid-axl__mem_2axl__mem___new_8h_1a5fc15a54e5fec1a6a105683913972e77:
.. _cid-axl_mem_new:
.. _doxid-axl__mem_2axl__mem___new_8h_1aa17c8b8a2fa3eabac3404d7aa6f32931:
.. _cid-axl_mem_new_args:
.. _doxid-axl__mem_2axl__mem___new_8h_1a542ab80a30a90f1041b36547ba8ddc31:
.. _cid-axl_mem_new_args_extra:
.. _doxid-axl__mem_2axl__mem___new_8h_1a98df28fd6c2064ed2e8cd14e6477ccda:
.. _cid-axl_mem_new_extra:
.. _doxid-axl__mem_2axl__mem___allocator_8h_1a931bc95c670317970f035617748ce78a:
.. _cid-axl_mem_zero_allocate:
.. _doxid-axl__mem_2axl__mem___allocator_8h_1af5e7568cf971046f722ee5db81293cf6:
.. _cid-axl_mem_zero_allocate_ex:
.. _doxid-axl__mem_2axl__mem___new_8h_1a143b24302b7c39780dd1ba12404283f2:
.. _cid-axl_mem_zero_new:
.. _doxid-axl__mem_2axl__mem___new_8h_1a963c1a3ce0875844af45cb4148864894:
.. _cid-axl_mem_zero_new_args:
.. _doxid-axl__mem_2axl__mem___new_8h_1adeb8d7e0b5dd8580c439e5a4b149f8ab:
.. _cid-axl_mem_zero_new_args_extra:
.. _doxid-axl__mem_2axl__mem___new_8h_1ae66ae67e18f7dd9dd457a0755be19778:
.. _cid-axl_mem_zero_new_extra:
.. _doxid-axl__g_2axl__g___pch_8h_1a3a30d8601d7858d4be88e8b91ce06759:
.. _cid-axl_min:
.. _doxid-axl__g_2axl__g___pch_8h_1a6f92feeeb44b469d3794ccdf1c6d6b1a:
.. _cid-axl_ptr_bits:
.. _doxid-axl__ref_2axl__ref___new_8h_1aaa7de74374ee5a4cf3f62e2c87224c2f:
.. _cid-axl_ref_allocate:
.. _doxid-axl__ref_2axl__ref___new_8h_1af58c96f3c0a6cfe9f5cbe59a15be11af:
.. _cid-axl_ref_allocate_extra:
.. _doxid-axl__ref_2axl__ref___new_8h_1a50b910599e8407282471d5bf1d37f9c1:
.. _cid-axl_ref_alloc_sizeof:
.. _doxid-axl__ref_2axl__ref___new_8h_1aaf3596cb43cc46dbe2422d367c137e5d:
.. _cid-axl_ref_new:
.. _doxid-axl__ref_2axl__ref___new_8h_1a12b6f33442ce0e27b6044c0ae4e4027e:
.. _cid-axl_ref_new_args:
.. _doxid-axl__ref_2axl__ref___new_8h_1a777a8cdd316c16e0e0befe1ce08fd694:
.. _cid-axl_ref_new_args_extra:
.. _doxid-axl__ref_2axl__ref___new_8h_1aa8cca0fdd76ed54edab528623fa04c57:
.. _cid-axl_ref_new_args_inplace:
.. _doxid-axl__ref_2axl__ref___new_8h_1a3009c5bc5077505efa9f34ba90eb5ead:
.. _cid-axl_ref_new_extra:
.. _doxid-axl__ref_2axl__ref___new_8h_1ab343931560413978d6c64985264cc412:
.. _cid-axl_ref_new_inplace:
.. _doxid-axl__ref_2axl__ref___rt_factory_8h_1afb5633fa4b241fe0a995fdef9388e60c:
.. _cid-axl_ref_rt_new:
.. _doxid-axl__ref_2axl__ref___rt_factory_8h_1aaaaf1bce2aca72512d37f4f3ce1d5b6f:
.. _cid-axl_ref_rt_new_extra:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a21f2067e502349e6bbc5a55511f825c0:
.. _cid-axl_sl_begin_duck_type_hash_table:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a8794bae3234cc099147b9fbd5593175e:
.. _cid-axl_sl_begin_hash_table:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1ac9e3c89c655926c425ffa48b956efdf0:
.. _cid-axl_sl_begin_hash_table_ex:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a2aae9a8bbe2a1214dcc27693523a388c:
.. _cid-axl_sl_begin_proto_recv_map:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a6d8aa295d7265350aa4312a19e77fddb:
.. _cid-axl_sl_begin_simple_hash_table:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1a8de24954d30e38e1b8d9b4f18234f702:
.. _cid-axl_sl_begin_string_hash_table:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1ac453dbee600e940c286b1f4a0ff7e615:
.. _cid-axl_sl_begin_string_hash_table_ignore_case_pcp:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1ac074c42f1693d7d2ed755f0161d30601:
.. _cid-axl_sl_begin_string_hash_table_ignore_case_pcu:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a800ec42d6318a7110153764a647f1112:
.. _cid-axl_sl_cmd_line_add_switch_info:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a49866cf7792991795cf12417ebf279ef:
.. _cid-axl_sl_cmd_line_map_switch:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a3d0982fc737226e87537d2823dbe5a11:
.. _cid-axl_sl_cmd_line_switch:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1af90a46741edd35711553aefcc7f06e9c:
.. _cid-axl_sl_cmd_line_switch_1:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1aeb5131045437c9d7660db7d27bfb9269:
.. _cid-axl_sl_cmd_line_switch_2:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a7c8d391d7bfaf9b30a46955965195cdd:
.. _cid-axl_sl_cmd_line_switch_3:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a0083b2b143b8139bb6c042e6e7c95a50:
.. _cid-axl_sl_cmd_line_switch_4:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a50729702bd23349f25692171e8b738fa:
.. _cid-axl_sl_cmd_line_switch_group:
.. _doxid-axl__sl_2axl__sl___guid_8h_1ad09ddd4daedd101652bcd54595e8ba6e:
.. _cid-axl_sl_define_guid:
.. _doxid-axl__sl_2axl__sl___cmd_line_parser_8h_1a1e462ca5ae3240ca54b8b46e450c88bb:
.. _cid-axl_sl_end_cmd_line_switch_table:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a9eae07026ebe869a74edb6460109569d:
.. _cid-axl_sl_end_duck_type_hash_table:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a0bc6a7b479e1313881ec80b82c1fb9c5:
.. _cid-axl_sl_end_hash_table:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a6932d20ad0d167d1a877f01e8ca08525:
.. _cid-axl_sl_end_proto_recv_map:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a4de6a4c1e2281b0a63295e7415b8a0a3:
.. _cid-axl_sl_end_simple_hash_table:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1a9cbe2df2629cc3581f5a5247988d53df:
.. _cid-axl_sl_end_string_hash_table:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1a13650f45fd56d478a5b4b5c5d79c8e0c:
.. _cid-axl_sl_end_string_hash_table_ignore_case_pcp:
.. _doxid-axl__sl_2axl__sl___string_hash_table_8h_1a1e7528606b02746c098e079b265d32d5:
.. _cid-axl_sl_end_string_hash_table_ignore_case_pcu:
.. _doxid-axl__sl_2axl__sl___guid_8h_1a1011248970fcd42ec578b9124f0bfc44:
.. _cid-axl_sl_guid_initializer:
.. _doxid-axl__sl_2axl__sl___hash_table_8h_1a5bb30814485770327045d3ffc018152a:
.. _cid-axl_sl_hash_table_entry:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a35223d5713e6dd0bdc747ddc2a9a2b7d:
.. _cid-axl_sl_proto_recv_function_0:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a4de3af30362edae8c7626a712ab58ea4:
.. _cid-axl_sl_proto_recv_function_0_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a67b54c3088c2308f7a2cf5eef4085ff2:
.. _cid-axl_sl_proto_recv_function_0_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a811227146640a53077739c515eee5bf4:
.. _cid-axl_sl_proto_recv_function_0_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a3213cbb907c7911bc8518d325217441e:
.. _cid-axl_sl_proto_recv_function_1:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a4b9f53dd250aceff60c79b9e7537d452:
.. _cid-axl_sl_proto_recv_function_1_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ade7238c9d6a4335d362fd28b9ae9390b:
.. _cid-axl_sl_proto_recv_function_1_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a4da2d7c70fd105975898e1242812fdf4:
.. _cid-axl_sl_proto_recv_function_1_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a25bafe3ea00d39cac4e5dfa2b104e60f:
.. _cid-axl_sl_proto_recv_function_2:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a432282e03731f850676dfe86c53bec42:
.. _cid-axl_sl_proto_recv_function_2_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a4ab467c5cea3fd48d4f9a47656a7f84a:
.. _cid-axl_sl_proto_recv_function_2_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a01286fc6c1b755954ede289f621974bc:
.. _cid-axl_sl_proto_recv_function_2_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1aad68190ff9fb41951fdf84b93a0da1f3:
.. _cid-axl_sl_proto_recv_function_3:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a14def1d8f48aeb25bd44eb1698ca92c9:
.. _cid-axl_sl_proto_recv_function_3_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a998f2fb8bb6d25e46589373d0677be5e:
.. _cid-axl_sl_proto_recv_function_3_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a1d45092e5929f76c458371f191bad588:
.. _cid-axl_sl_proto_recv_function_3_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ad0373b86ce654361eca81da0f7284101:
.. _cid-axl_sl_proto_recv_function_4:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1af5370925853a6a4b272fe3b4b67a46ea:
.. _cid-axl_sl_proto_recv_function_4_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1aa33ffc3300678a2dd732e1c714b11cc4:
.. _cid-axl_sl_proto_recv_function_4_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ad8f51f65d584f0897f43e13bdccf0cd1:
.. _cid-axl_sl_proto_recv_function_4_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a4bae933742b5ceb8ba58d776aad2eb1c:
.. _cid-axl_sl_proto_send_function_0:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a6c38da434d93a7078b0c79e62b87ea94:
.. _cid-axl_sl_proto_send_function_0_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a64a6e631b116ffaddf85443fd21ac75c:
.. _cid-axl_sl_proto_send_function_0_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ab162443351064dcabdfac5e36f11a8a2:
.. _cid-axl_sl_proto_send_function_0_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a5ce9858db8c6a0a91d3a1158fcf60293:
.. _cid-axl_sl_proto_send_function_1:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a27dc87dadf656f01b83eedd70351130d:
.. _cid-axl_sl_proto_send_function_1_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a0822736a44832d2a4d1a16f1cadc8171:
.. _cid-axl_sl_proto_send_function_1_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a5723e33a3ad5e16a6e73a48e8c9cb629:
.. _cid-axl_sl_proto_send_function_1_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a9374efb337e8d86f410574f6833a9fe2:
.. _cid-axl_sl_proto_send_function_2:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1aee486bc6183cd97cabe9458187fa503b:
.. _cid-axl_sl_proto_send_function_2_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ae0d3559fada189964bf09009aa466735:
.. _cid-axl_sl_proto_send_function_2_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a9314ace0a0979f7d4116d87c5d093a69:
.. _cid-axl_sl_proto_send_function_2_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ab3a2580d6ffd1a5efd24f96f0d326a84:
.. _cid-axl_sl_proto_send_function_3:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a70243c80e3b1b33e20e438843d389f0e:
.. _cid-axl_sl_proto_send_function_3_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ad5f5d758a9326e1fd7f283ea725d4fe0:
.. _cid-axl_sl_proto_send_function_3_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1ad39be467f1b4f3ecb87746b2e8a65958:
.. _cid-axl_sl_proto_send_function_3_str:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a600ec40b019eac16d99126a8e8ec1e52:
.. _cid-axl_sl_proto_send_function_4:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1afb1aa3cfa3480a28efaa9d48ecb8ab11:
.. _cid-axl_sl_proto_send_function_4_err:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a6a6fe64caa1dac88530b967f6e7f2c3a:
.. _cid-axl_sl_proto_send_function_4_ptr:
.. _doxid-axl__sl_2axl__sl___protocol_8h_1a32febab6014f8f7762886c8dfbe3bdaa:
.. _cid-axl_sl_proto_send_function_4_str:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1ae8d97b5150d06a2303f849970453196e:
.. _cid-axl_sys_begin_sjlj_try:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1ab2b20f32609bbab07280cd2f5c2cb24b:
.. _cid-axl_sys_end_sjlj_try:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1a5228696a44fab14bdb51755a02b1072f:
.. _cid-axl_sys_end_sjlj_try_ex:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1a7220ba957507de0f5daca0e073e19450:
.. _cid-axl_sys_end_sjlj_try_impl:
.. _doxid-axl__sys_2axl__sys___time_8h_1a5bc050755c6878c4df1e6e42ec8fb2f5:
.. _cid-axl_sys_epoch_diff:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1af35c540e04bb9e64167e88b9b0443995:
.. _cid-axl_sys_sjlj_catch:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1a63846c173b1430d7792ed54d59586b4c:
.. _cid-axl_sys_sjlj_finally:
.. _doxid-axl__sys_2axl__sys___sjlj_try_8h_1a8f16c605dd46ed135a971b3255b32721:
.. _cid-axl_sys_sjlj_throw:
.. _doxid-axl__g_2axl__g___pch_8h_1a2964032a0c28e28cb72ae66754f14eb8:
.. _cid-axl_trace-2:
.. _doxid-axl__g_2axl__g___pch_8h_1a73ad112db6d2a0eae123168b002a20bb:
.. _cid-axl_va_decl:
.. _doxid-axl__gui_2axl__gui___qt_pch_8h_1a6d7f664257f97ad028d6aa68e8ac4111:
.. _cid-qt_no_version_tagging:
.. _doxid-axl__g_2axl__g___pch_8h_1aad9cc64d45a76ba0d37c00f8cd9caa37:
.. _cid-trace:
.. _doxid-axl__g_2axl__g___pch_8h_1a73ea1310247ce7d465e7552e24cd7ddf:
.. _cid-_axl_debug:
.. _doxid-axl__g_2axl__g___pch_8h_1ac55a1d9ac958fbcb3eb7f24624c05d3f:
.. _cid-axl_va_arg:
.. _doxid-axl__g_2axl__g___pch_8h_1a6342e9f54dc9ee6e50c7205157ad2cf0:
.. _cid-axl_va_end:
.. _doxid-axl__g_2axl__g___pch_8h_1ae6f929fa88e0bd99e48d52d8acc236fa:
.. _cid-axl_va_start:
.. _doxid-axl__g_2axl__g___pch_8h_1a537f757ced2822b2872e7728d79f1830:
.. _cid-containerof:
.. _doxid-axl__g_2axl__g___pch_8h_1a3c5cd622462bb50b6dab4c189e219eb9:
.. _cid-countof:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a256b2de13b2a8b9d24a3cd3017edfaa0:
.. _cid-getbitmask:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a4ba79f7c3427e494e67185116474f117:
.. _cid-gethibit:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1aa6c7a2f5693a7431d357f546c7ecfa5f:
.. _cid-gethibitidx:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a64494db3342c24451d769051684327ef:
.. _cid-gethibitmask:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a905db8e31a84c1604bc09f811eaa5ebf:
.. _cid-getlobit:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1aa931b1fde22374fcb991a4b52a9ef25c:
.. _cid-getlobitidx:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a4a286ca9d1d1b4090ab6f45f4b74fada:
.. _cid-getlobitmask:
.. _doxid-axl__sl_2axl__sl___bit_idx_8h_1a7106e731a7518c04d9eec606602deb94:
.. _cid-getpowerof2ge:
.. _doxid-axl__g_2axl__g___pch_8h_1aeb58236d17b9d72a7b18e9de19954fba:
.. _cid-lengthof:
.. ref-code-block:: cpp
	:class: overview-code-block

	// namespaces

	namespace :ref:`axl<doxid-namespaceaxl>`
	    namespace :ref:`axl::cf<doxid-namespaceaxl_1_1cf>`
	    namespace :ref:`axl::cry<doxid-namespaceaxl_1_1cry>`
	    namespace :ref:`axl::enc<doxid-namespaceaxl_1_1enc>`
	    namespace :ref:`axl::err<doxid-namespaceaxl_1_1err>`
	    namespace :ref:`axl::fsm<doxid-namespaceaxl_1_1fsm>`
	    namespace :ref:`axl::g<doxid-namespaceaxl_1_1g>`
	    namespace :ref:`axl::gui<doxid-namespaceaxl_1_1gui>`
	    namespace :ref:`axl::ini<doxid-namespaceaxl_1_1ini>`
	    namespace :ref:`axl::io<doxid-namespaceaxl_1_1io>`
	        namespace :ref:`axl::io::psx<doxid-namespaceaxl_1_1io_1_1psx>`
	        namespace :ref:`axl::io::win<doxid-namespaceaxl_1_1io_1_1win>`
	    namespace :ref:`axl::iok<doxid-namespaceaxl_1_1iok>`
	    namespace :ref:`axl::lex<doxid-namespaceaxl_1_1lex>`
	    namespace :ref:`axl::lua<doxid-namespaceaxl_1_1lua>`
	    namespace :ref:`axl::mem<doxid-namespaceaxl_1_1mem>`
	    namespace :ref:`axl::ref<doxid-namespaceaxl_1_1ref>`
	    namespace :ref:`axl::sl<doxid-namespaceaxl_1_1sl>`
	    namespace :ref:`axl::st<doxid-namespaceaxl_1_1st>`
	    namespace :ref:`axl::sys<doxid-namespaceaxl_1_1sys>`
	        namespace :ref:`axl::sys::drw<doxid-namespaceaxl_1_1sys_1_1drw>`
	        namespace :ref:`axl::sys::lnx<doxid-namespaceaxl_1_1sys_1_1lnx>`
	        namespace :ref:`axl::sys::psx<doxid-namespaceaxl_1_1sys_1_1psx>`
	        namespace :ref:`axl::sys::win<doxid-namespaceaxl_1_1sys_1_1win>`
	    namespace :ref:`axl::xml<doxid-namespaceaxl_1_1xml>`
	    namespace :ref:`axl::zip<doxid-namespaceaxl_1_1zip>`

	// typedefs

	typedef int bool_t
	typedef unsigned int uint_t
	typedef unsigned char uchar_t
	typedef unsigned short ushort_t
	typedef unsigned long ulong_t
	typedef uint8_t byte_t
	typedef uint16_t word_t
	typedef uint64_t qword_t
	typedef uint32_t dword_t
	typedef int64_t intdptr_t
	typedef uint64_t uintdptr_t
	typedef void* handle_t
	typedef char utf8_t
	typedef wchar_t utf16_t
	typedef int32_t utf32_t

	// classes

	class :ref:`axl_va_list<doxid-classaxl__va__list>` 

	// global variables

	AXL_SELECT_ANY FILE* axl_g_traceFile

	// global functions

	size_t
	strlen_s (const char* p)

	size_t
	wcslen_s (const wchar_t* p)

	void
	axl_trace_va (
	    const char* formatString,
	    :ref:`axl_va_list<doxid-classaxl__va__list>` va
	    )

	void
	axl_trace (
	    const char* formatString,
	    ...
	    )

	// macros

	#define ASSERT
	#define AXL_ASSERT
	#define AXL_DEBUG_STRING
	#define AXL_DEBUG_SUFFIX
	#define AXL_DISABLE_COPY(Class)
	#define AXL_GUI_WIDGET_BEGIN_MSG_MAP(BaseClass)
	#define AXL_GUI_WIDGET_END_MSG_MAP()

	#define AXL_GUI_WIDGET_MSG_HANDLER( \
	    msgCode, \
	    handler \
	    )

	#define AXL_ITOA(n)
	#define AXL_ITOA_IMPL(n)
	#define AXL_LEX_BEGIN_TOKEN_NAME_MAP(Class)
	#define AXL_LEX_END_TOKEN_NAME_MAP()
	#define AXL_LEX_END_TOKEN_NAME_MAP_EX(unknownName)

	#define AXL_LEX_TOKEN_NAME( \
	    tokenKind, \
	    name \
	    )

	#define AXL_MAX( \
	    a, \
	    b \
	    )

	#define AXL_MEM_ALLOCATE(size)

	#define AXL_MEM_ALLOCATE_EX( \
	    size, \
	    tag \
	    )

	#define AXL_MEM_DELETE(p)
	#define AXL_MEM_FREE(p)
	#define AXL_MEM_NEW(T)

	#define AXL_MEM_NEW_ARGS( \
	    T, \
	    args \
	    )

	#define AXL_MEM_NEW_ARGS_EXTRA( \
	    T, \
	    args, \
	    extra \
	    )

	#define AXL_MEM_NEW_EXTRA( \
	    T, \
	    extra \
	    )

	#define AXL_MEM_ZERO_ALLOCATE(size)

	#define AXL_MEM_ZERO_ALLOCATE_EX( \
	    size, \
	    tag \
	    )

	#define AXL_MEM_ZERO_NEW(T)

	#define AXL_MEM_ZERO_NEW_ARGS( \
	    T, \
	    args \
	    )

	#define AXL_MEM_ZERO_NEW_ARGS_EXTRA( \
	    T, \
	    args, \
	    extra \
	    )

	#define AXL_MEM_ZERO_NEW_EXTRA( \
	    T, \
	    extra \
	    )

	#define AXL_MIN( \
	    a, \
	    b \
	    )

	#define AXL_PTR_BITS
	#define AXL_REF_ALLOCATE(T)

	#define AXL_REF_ALLOCATE_EXTRA( \
	    T, \
	    extra \
	    )

	#define AXL_REF_ALLOC_SIZEOF(T)
	#define AXL_REF_NEW(T)

	#define AXL_REF_NEW_ARGS( \
	    T, \
	    args \
	    )

	#define AXL_REF_NEW_ARGS_EXTRA( \
	    T, \
	    args, \
	    extra \
	    )

	#define AXL_REF_NEW_ARGS_INPLACE( \
	    T, \
	    args, \
	    p, \
	    parent, \
	    flags \
	    )

	#define AXL_REF_NEW_EXTRA( \
	    T, \
	    extra \
	    )

	#define AXL_REF_NEW_INPLACE( \
	    T, \
	    p, \
	    parent, \
	    flags \
	    )

	#define AXL_REF_RT_NEW(Type)

	#define AXL_REF_RT_NEW_EXTRA( \
	    Type, \
	    extra \
	    )

	#define AXL_SL_BEGIN_DUCK_TYPE_HASH_TABLE( \
	    Class, \
	    Key, \
	    Value \
	    )

	#define AXL_SL_BEGIN_HASH_TABLE( \
	    Class, \
	    Key, \
	    Value, \
	    Hash \
	    )

	#define AXL_SL_BEGIN_HASH_TABLE_EX( \
	    Class, \
	    Key, \
	    Value, \
	    Hash, \
	    Eq, \
	    KeyArg, \
	    ValueArg \
	    )

	#define AXL_SL_BEGIN_PROTO_RECV_MAP(processMsg)

	#define AXL_SL_BEGIN_SIMPLE_HASH_TABLE( \
	    Class, \
	    Key, \
	    Value \
	    )

	#define AXL_SL_BEGIN_STRING_HASH_TABLE( \
	    Class, \
	    Value \
	    )

	#define AXL_SL_BEGIN_STRING_HASH_TABLE_IGNORE_CASE_PCP( \
	    Class, \
	    Value \
	    )

	#define AXL_SL_BEGIN_STRING_HASH_TABLE_IGNORE_CASE_PCU( \
	    Class, \
	    Value \
	    )

	#define AXL_SL_CMD_LINE_ADD_SWITCH_INFO( \
	    switchKind, \
	    name0, \
	    name1, \
	    name2, \
	    name3, \
	    value, \
	    description \
	    )

	#define AXL_SL_CMD_LINE_MAP_SWITCH(name)
	#define AXL_SL_CMD_LINE_SWITCH

	#define AXL_SL_CMD_LINE_SWITCH_1( \
	    switchKind, \
	    name, \
	    value, \
	    description \
	    )

	#define AXL_SL_CMD_LINE_SWITCH_2( \
	    switchKind, \
	    name0, \
	    name1, \
	    value, \
	    description \
	    )

	#define AXL_SL_CMD_LINE_SWITCH_3( \
	    switchKind, \
	    name0, \
	    name1, \
	    name2, \
	    value, \
	    description \
	    )

	#define AXL_SL_CMD_LINE_SWITCH_4( \
	    switchKind, \
	    name0, \
	    name1, \
	    name2, \
	    name3, \
	    value, \
	    description \
	    )

	#define AXL_SL_CMD_LINE_SWITCH_GROUP(description)

	#define AXL_SL_DEFINE_GUID( \
	    n, \
	    l, \
	    s1, \
	    s2, \
	    b1, \
	    b2, \
	    b3, \
	    b4, \
	    b5, \
	    b6, \
	    b7, \
	    b8 \
	    )

	#define AXL_SL_END_CMD_LINE_SWITCH_TABLE()
	#define AXL_SL_END_DUCK_TYPE_HASH_TABLE()
	#define AXL_SL_END_HASH_TABLE()
	#define AXL_SL_END_PROTO_RECV_MAP()
	#define AXL_SL_END_SIMPLE_HASH_TABLE()
	#define AXL_SL_END_STRING_HASH_TABLE()
	#define AXL_SL_END_STRING_HASH_TABLE_IGNORE_CASE_PCP()
	#define AXL_SL_END_STRING_HASH_TABLE_IGNORE_CASE_PCU()

	#define AXL_SL_GUID_INITIALIZER( \
	    l, \
	    s1, \
	    s2, \
	    b1, \
	    b2, \
	    b3, \
	    b4, \
	    b5, \
	    b6, \
	    b7, \
	    b8 \
	    )

	#define AXL_SL_HASH_TABLE_ENTRY( \
	    key, \
	    value \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_0( \
	    code, \
	    handler \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_0_ERR( \
	    code, \
	    handler \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_0_PTR( \
	    code, \
	    handler \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_0_STR( \
	    code, \
	    handler \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_1( \
	    code, \
	    handler, \
	    T1 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_1_ERR( \
	    code, \
	    handler, \
	    T1 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_1_PTR( \
	    code, \
	    handler, \
	    T1 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_1_STR( \
	    code, \
	    handler, \
	    T1 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_2( \
	    code, \
	    handler, \
	    T1, \
	    T2 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_2_ERR( \
	    code, \
	    handler, \
	    T1, \
	    T2 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_2_PTR( \
	    code, \
	    handler, \
	    T1, \
	    T2 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_2_STR( \
	    code, \
	    handler, \
	    T1, \
	    T2 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_3( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_3_ERR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_3_PTR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_3_STR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_4( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3, \
	    T4 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_4_ERR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3, \
	    T4 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_4_PTR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3, \
	    T4 \
	    )

	#define AXL_SL_PROTO_RECV_FUNCTION_4_STR( \
	    code, \
	    handler, \
	    T1, \
	    T2, \
	    T3, \
	    T4 \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_0( \
	    code, \
	    sender \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_0_ERR( \
	    code, \
	    sender, \
	    errArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_0_PTR( \
	    code, \
	    sender, \
	    ptrArg, \
	    sizeArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_0_STR( \
	    code, \
	    sender, \
	    strArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_1( \
	    code, \
	    sender, \
	    T1, \
	    arg1 \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_1_ERR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    errArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_1_PTR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    ptrArg, \
	    sizeArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_1_STR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    strArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_2( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2 \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_2_ERR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    errArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_2_PTR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    ptrArg, \
	    sizeArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_2_STR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    strArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_3( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3 \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_3_ERR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    errArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_3_PTR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    ptrArg, \
	    sizeArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_3_STR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    strArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_4( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    T4, \
	    arg4 \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_4_ERR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    T4, \
	    arg4, \
	    errArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_4_PTR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    T4, \
	    arg4, \
	    ptrArg, \
	    sizeArg \
	    )

	#define AXL_SL_PROTO_SEND_FUNCTION_4_STR( \
	    code, \
	    sender, \
	    T1, \
	    arg1, \
	    T2, \
	    arg2, \
	    T3, \
	    arg3, \
	    T4, \
	    arg4, \
	    strArg \
	    )

	#define AXL_SYS_BEGIN_SJLJ_TRY()
	#define AXL_SYS_END_SJLJ_TRY()
	#define AXL_SYS_END_SJLJ_TRY_EX(result)
	#define AXL_SYS_END_SJLJ_TRY_IMPL()
	#define AXL_SYS_EPOCH_DIFF
	#define AXL_SYS_SJLJ_CATCH()
	#define AXL_SYS_SJLJ_FINALLY()
	#define AXL_SYS_SJLJ_THROW()
	#define AXL_TRACE

	#define AXL_VA_DECL( \
	    va, \
	    a \
	    )

	#define QT_NO_VERSION_TAGGING
	#define TRACE
	#define _AXL_DEBUG

	#define axl_va_arg( \
	    va, \
	    T \
	    )

	#define axl_va_end(va)

	#define axl_va_start( \
	    va, \
	    a \
	    )

	#define containerof( \
	    p, \
	    T, \
	    f \
	    )

	#define countof(a)
	#define getBitmask
	#define getHiBit
	#define getHiBitIdx
	#define getHiBitmask
	#define getLoBit
	#define getLoBitIdx
	#define getLoBitmask
	#define getPowerOf2Ge
	#define lengthof(s)

